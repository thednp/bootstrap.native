{"version":3,"file":"index-Ctar34Rq.js","sources":["../../node_modules/.pnpm/@thednp+position-observer@1.1.0/node_modules/@thednp/position-observer/dist/index.mjs"],"sourcesContent":["import { isElement, isFunction } from \"@thednp/shorty\";\n\n//#region package.json\nvar version = \"1.1.0\";\n\n//#endregion\n//#region src/index.ts\nconst callbackModes = [\n\t\"all\",\n\t\"intersecting\",\n\t\"update\"\n];\nconst errorString = \"PositionObserver Error\";\n/**\n* The PositionObserver class is a utility class that observes the position\n* of DOM elements and triggers a callback when their position changes.\n*/\nvar PositionObserver = class {\n\tentries;\n\tstatic version = version;\n\t/** `PositionObserver.tick` */\n\t_t;\n\t/** `PositionObserver.root` */\n\t_r;\n\t/** `PositionObserver.callbackMode` */\n\t_cm;\n\t/** `PositionObserver.root.clientWidth` */\n\t_w;\n\t/** `PositionObserver.root.clientHeight` */\n\t_h;\n\t/** `IntersectionObserver.options.rootMargin` */\n\t_rm;\n\t/** `IntersectionObserver.options.threshold` */\n\t_th;\n\t/** `PositionObserver.callback` */\n\t_c;\n\t/**\n\t* The constructor takes two arguments, a `callback`, which is called\n\t* whenever the position of an observed element changes and an `options` object.\n\t* The callback function takes an array of `PositionObserverEntry` objects\n\t* as its first argument and the PositionObserver instance as its second argument.\n\t*\n\t* @param callback the callback that applies to all targets of this observer\n\t* @param options the options of this observer\n\t*/\n\tconstructor(callback, options) {\n\t\tif (!isFunction(callback)) throw new Error(`${errorString}: ${callback} is not a function.`);\n\t\tthis.entries = /* @__PURE__ */ new Map();\n\t\tthis._c = callback;\n\t\tthis._t = 0;\n\t\tconst root = isElement(options?.root) ? options.root : document?.documentElement;\n\t\tthis._r = root;\n\t\tthis._rm = options?.rootMargin;\n\t\tthis._th = options?.threshold;\n\t\t/* istanbul ignore next @preserve */\n\t\tthis._cm = callbackModes.indexOf(options?.callbackMode || \"intersecting\");\n\t\tthis._w = root.clientWidth;\n\t\tthis._h = root.clientHeight;\n\t}\n\t/**\n\t* Start observing the position of the specified element.\n\t* If the element is not currently attached to the DOM,\n\t* it will NOT be added to the entries.\n\t*\n\t* @param target an `Element` target\n\t*/\n\tobserve = (target) => {\n\t\tif (!isElement(target)) throw new Error(`${errorString}: ${target} is not an instance of Element.`);\n\t\t/* istanbul ignore else @preserve - a guard must be set */\n\t\tif (!this._r.contains(target)) return;\n\t\tthis._n(target).then((ioEntry) => {\n\t\t\t/* istanbul ignore else @preserve - don't allow duplicate entries */\n\t\t\tif (ioEntry.boundingClientRect && !this.getEntry(target)) this.entries.set(target, ioEntry);\n\t\t\t/* istanbul ignore else @preserve */\n\t\t\tif (!this._t) this._t = requestAnimationFrame(this._rc);\n\t\t});\n\t};\n\t/**\n\t* Stop observing the position of the specified element.\n\t*\n\t* @param target an `Element` target\n\t*/\n\tunobserve = (target) => {\n\t\t/* istanbul ignore else @preserve */\n\t\tif (this.entries.has(target)) this.entries.delete(target);\n\t};\n\t/**\n\t* Private method responsible for all the heavy duty,\n\t* the observer's runtime.\n\t* `PositionObserver.runCallback`\n\t*/\n\t_rc = () => {\n\t\t/* istanbul ignore if @preserve - a guard must be set */\n\t\tif (!this.entries.size) {\n\t\t\tthis._t = 0;\n\t\t\treturn;\n\t\t}\n\t\tconst { clientWidth, clientHeight } = this._r;\n\t\tconst queue = new Promise((resolve) => {\n\t\t\tconst updates = [];\n\t\t\tthis.entries.forEach(({ target, boundingClientRect: oldBoundingBox, isIntersecting: oldIsIntersecting }) => {\n\t\t\t\t/* istanbul ignore if @preserve - a guard must be set when target has been removed */\n\t\t\t\tif (!this._r.contains(target)) return;\n\t\t\t\tthis._n(target).then((ioEntry) => {\n\t\t\t\t\t/* istanbul ignore if @preserve - make sure to only count visible entries */\n\t\t\t\t\tif (!ioEntry.isIntersecting) {\n\t\t\t\t\t\tif (this._cm === 1) return;\n\t\t\t\t\t\telse if (this._cm === 2) {\n\t\t\t\t\t\t\tif (oldIsIntersecting) {\n\t\t\t\t\t\t\t\tthis.entries.set(target, ioEntry);\n\t\t\t\t\t\t\t\tupdates.push(ioEntry);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst { left, top } = ioEntry.boundingClientRect;\n\t\t\t\t\t/* istanbul ignore else @preserve - only schedule entries that changed position */\n\t\t\t\t\tif (oldBoundingBox.top !== top || oldBoundingBox.left !== left || this._w !== clientWidth || this._h !== clientHeight) {\n\t\t\t\t\t\tthis.entries.set(target, ioEntry);\n\t\t\t\t\t\tupdates.push(ioEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis._w = clientWidth;\n\t\t\tthis._h = clientHeight;\n\t\t\tresolve(updates);\n\t\t});\n\t\tthis._t = requestAnimationFrame(async () => {\n\t\t\tconst updates = await queue;\n\t\t\t/* istanbul ignore else @preserve */\n\t\t\tif (updates.length) this._c(updates, this);\n\t\t\tthis._rc();\n\t\t});\n\t};\n\t/**\n\t* Check intersection status and resolve it\n\t* right away.\n\t*\n\t* `PositionObserver.newEntryForTarget`\n\t*\n\t* @param target an `Element` target\n\t*/\n\t_n = (target) => {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst intersectionObserver = new IntersectionObserver(([ioEntry], ob) => {\n\t\t\t\tob.disconnect();\n\t\t\t\tresolve(ioEntry);\n\t\t\t}, {\n\t\t\t\tthreshold: this._th,\n\t\t\t\trootMargin: this._rm\n\t\t\t});\n\t\t\tintersectionObserver.observe(target);\n\t\t});\n\t};\n\t/**\n\t* Find the entry for a given target.\n\t*\n\t* @param target an `HTMLElement` target\n\t*/\n\tgetEntry = (target) => this.entries.get(target);\n\t/**\n\t* Immediately stop observing all elements.\n\t*/\n\tdisconnect = () => {\n\t\tcancelAnimationFrame(this._t);\n\t\tthis.entries.clear();\n\t\tthis._t = 0;\n\t};\n};\n\n//#endregion\nexport { PositionObserver as default };\n//# sourceMappingURL=index.mjs.map"],"names":["version","callbackModes","errorString","PositionObserver","callback","options","isFunction","root","isElement","target","ioEntry","clientWidth","clientHeight","queue","resolve","updates","oldBoundingBox","oldIsIntersecting","left","top","ob"],"mappings":"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","x_google_ignoreList":[0]}