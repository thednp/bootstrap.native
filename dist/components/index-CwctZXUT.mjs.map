{"version":3,"file":"index-CwctZXUT.mjs","sources":["../../node_modules/.pnpm/@thednp+position-observer@1.1.0/node_modules/@thednp/position-observer/dist/index.mjs"],"sourcesContent":["import { isElement, isFunction } from \"@thednp/shorty\";\n\n//#region package.json\nvar version = \"1.1.0\";\n\n//#endregion\n//#region src/index.ts\nconst callbackModes = [\n\t\"all\",\n\t\"intersecting\",\n\t\"update\"\n];\nconst errorString = \"PositionObserver Error\";\n/**\n* The PositionObserver class is a utility class that observes the position\n* of DOM elements and triggers a callback when their position changes.\n*/\nvar PositionObserver = class {\n\tentries;\n\tstatic version = version;\n\t/** `PositionObserver.tick` */\n\t_t;\n\t/** `PositionObserver.root` */\n\t_r;\n\t/** `PositionObserver.callbackMode` */\n\t_cm;\n\t/** `PositionObserver.root.clientWidth` */\n\t_w;\n\t/** `PositionObserver.root.clientHeight` */\n\t_h;\n\t/** `IntersectionObserver.options.rootMargin` */\n\t_rm;\n\t/** `IntersectionObserver.options.threshold` */\n\t_th;\n\t/** `PositionObserver.callback` */\n\t_c;\n\t/**\n\t* The constructor takes two arguments, a `callback`, which is called\n\t* whenever the position of an observed element changes and an `options` object.\n\t* The callback function takes an array of `PositionObserverEntry` objects\n\t* as its first argument and the PositionObserver instance as its second argument.\n\t*\n\t* @param callback the callback that applies to all targets of this observer\n\t* @param options the options of this observer\n\t*/\n\tconstructor(callback, options) {\n\t\tif (!isFunction(callback)) throw new Error(`${errorString}: ${callback} is not a function.`);\n\t\tthis.entries = /* @__PURE__ */ new Map();\n\t\tthis._c = callback;\n\t\tthis._t = 0;\n\t\tconst root = isElement(options?.root) ? options.root : document?.documentElement;\n\t\tthis._r = root;\n\t\tthis._rm = options?.rootMargin;\n\t\tthis._th = options?.threshold;\n\t\t/* istanbul ignore next @preserve */\n\t\tthis._cm = callbackModes.indexOf(options?.callbackMode || \"intersecting\");\n\t\tthis._w = root.clientWidth;\n\t\tthis._h = root.clientHeight;\n\t}\n\t/**\n\t* Start observing the position of the specified element.\n\t* If the element is not currently attached to the DOM,\n\t* it will NOT be added to the entries.\n\t*\n\t* @param target an `Element` target\n\t*/\n\tobserve = (target) => {\n\t\tif (!isElement(target)) throw new Error(`${errorString}: ${target} is not an instance of Element.`);\n\t\t/* istanbul ignore else @preserve - a guard must be set */\n\t\tif (!this._r.contains(target)) return;\n\t\tthis._n(target).then((ioEntry) => {\n\t\t\t/* istanbul ignore else @preserve - don't allow duplicate entries */\n\t\t\tif (ioEntry.boundingClientRect && !this.getEntry(target)) this.entries.set(target, ioEntry);\n\t\t\t/* istanbul ignore else @preserve */\n\t\t\tif (!this._t) this._t = requestAnimationFrame(this._rc);\n\t\t});\n\t};\n\t/**\n\t* Stop observing the position of the specified element.\n\t*\n\t* @param target an `Element` target\n\t*/\n\tunobserve = (target) => {\n\t\t/* istanbul ignore else @preserve */\n\t\tif (this.entries.has(target)) this.entries.delete(target);\n\t};\n\t/**\n\t* Private method responsible for all the heavy duty,\n\t* the observer's runtime.\n\t* `PositionObserver.runCallback`\n\t*/\n\t_rc = () => {\n\t\t/* istanbul ignore if @preserve - a guard must be set */\n\t\tif (!this.entries.size) {\n\t\t\tthis._t = 0;\n\t\t\treturn;\n\t\t}\n\t\tconst { clientWidth, clientHeight } = this._r;\n\t\tconst queue = new Promise((resolve) => {\n\t\t\tconst updates = [];\n\t\t\tthis.entries.forEach(({ target, boundingClientRect: oldBoundingBox, isIntersecting: oldIsIntersecting }) => {\n\t\t\t\t/* istanbul ignore if @preserve - a guard must be set when target has been removed */\n\t\t\t\tif (!this._r.contains(target)) return;\n\t\t\t\tthis._n(target).then((ioEntry) => {\n\t\t\t\t\t/* istanbul ignore if @preserve - make sure to only count visible entries */\n\t\t\t\t\tif (!ioEntry.isIntersecting) {\n\t\t\t\t\t\tif (this._cm === 1) return;\n\t\t\t\t\t\telse if (this._cm === 2) {\n\t\t\t\t\t\t\tif (oldIsIntersecting) {\n\t\t\t\t\t\t\t\tthis.entries.set(target, ioEntry);\n\t\t\t\t\t\t\t\tupdates.push(ioEntry);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst { left, top } = ioEntry.boundingClientRect;\n\t\t\t\t\t/* istanbul ignore else @preserve - only schedule entries that changed position */\n\t\t\t\t\tif (oldBoundingBox.top !== top || oldBoundingBox.left !== left || this._w !== clientWidth || this._h !== clientHeight) {\n\t\t\t\t\t\tthis.entries.set(target, ioEntry);\n\t\t\t\t\t\tupdates.push(ioEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis._w = clientWidth;\n\t\t\tthis._h = clientHeight;\n\t\t\tresolve(updates);\n\t\t});\n\t\tthis._t = requestAnimationFrame(async () => {\n\t\t\tconst updates = await queue;\n\t\t\t/* istanbul ignore else @preserve */\n\t\t\tif (updates.length) this._c(updates, this);\n\t\t\tthis._rc();\n\t\t});\n\t};\n\t/**\n\t* Check intersection status and resolve it\n\t* right away.\n\t*\n\t* `PositionObserver.newEntryForTarget`\n\t*\n\t* @param target an `Element` target\n\t*/\n\t_n = (target) => {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst intersectionObserver = new IntersectionObserver(([ioEntry], ob) => {\n\t\t\t\tob.disconnect();\n\t\t\t\tresolve(ioEntry);\n\t\t\t}, {\n\t\t\t\tthreshold: this._th,\n\t\t\t\trootMargin: this._rm\n\t\t\t});\n\t\t\tintersectionObserver.observe(target);\n\t\t});\n\t};\n\t/**\n\t* Find the entry for a given target.\n\t*\n\t* @param target an `HTMLElement` target\n\t*/\n\tgetEntry = (target) => this.entries.get(target);\n\t/**\n\t* Immediately stop observing all elements.\n\t*/\n\tdisconnect = () => {\n\t\tcancelAnimationFrame(this._t);\n\t\tthis.entries.clear();\n\t\tthis._t = 0;\n\t};\n};\n\n//#endregion\nexport { PositionObserver as default };\n//# sourceMappingURL=index.mjs.map"],"names":["version","callbackModes","errorString","PositionObserver","callback","options","isFunction","root","isElement","target","ioEntry","clientWidth","clientHeight","queue","resolve","updates","oldBoundingBox","oldIsIntersecting","left","top","ob"],"mappings":"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","x_google_ignoreList":[0]}