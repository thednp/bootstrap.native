{"version":3,"file":"tab.mjs","sources":["../../src/strings/tabString.ts","../../src/strings/tabComponent.ts","../../src/components/tab.ts"],"sourcesContent":["/** @type {string} */\nconst tabString = \"tab\";\nexport default tabString;\n","/** @type {string} */\nconst tabComponent = \"Tab\";\nexport default tabComponent;\n","/* Native JavaScript for Bootstrap 5 | Tab\n------------------------------------------ */\nimport {\n  addClass,\n  ariaSelected,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  getElementsByClassName,\n  getInstance,\n  hasClass,\n  isHTMLElement,\n  mouseclickEvent,\n  MouseEvent,\n  querySelector,\n  reflow,\n  removeClass,\n  setAttribute,\n  Timer,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\n\nimport collapsingClass from \"~/strings/collapsingClass\";\nimport activeClass from \"~/strings/activeClass\";\nimport fadeClass from \"~/strings/fadeClass\";\nimport showClass from \"~/strings/showClass\";\nimport dropdownClasses from \"~/strings/dropdownClasses\";\nimport dataBsToggle from \"~/strings/dataBsToggle\";\nimport tabString from \"~/strings/tabString\";\nimport tabComponent from \"~/strings/tabComponent\";\nimport getTargetElement from \"~/util/getTargetElement\";\nimport BaseComponent from \"./base-component\";\nimport type { /* TabOptions, */ TabEvent } from \"~/interface/tab\";\n\n// TAB PRIVATE GC\n// ================\nconst tabSelector = `[${dataBsToggle}=\"${tabString}\"]`;\n\n/**\n * Static method which returns an existing `Tab` instance associated\n * to a target `Element`.\n */\nconst getTabInstance = (element: Element) =>\n  getInstance<Tab>(element, tabComponent);\n\n/** A `Tab` initialization callback. */\nconst tabInitCallback = (element: Element) => new Tab(element);\n\ntype TabEventProps = {\n  relatedTarget: Element & EventTarget | undefined;\n};\n\n// TAB CUSTOM EVENTS\n// =================\nconst showTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `show.bs.${tabString}`,\n);\nconst shownTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `shown.bs.${tabString}`,\n);\nconst hideTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `hide.bs.${tabString}`,\n);\nconst hiddenTabEvent = createCustomEvent<TabEventProps, TabEvent>(\n  `hidden.bs.${tabString}`,\n);\n\ninterface TabPrivate {\n  tab: HTMLElement | null;\n  content: HTMLElement | null;\n  currentHeight: number;\n  nextHeight: number;\n}\n\n/**\n * Stores the current active tab and its content\n * for a given `.nav` element.\n */\nconst tabPrivate: Map<HTMLElement, TabPrivate> = new Map();\n\n// TAB PRIVATE METHODS\n// ===================\n/**\n * Executes after tab transition has finished.\n *\n * @param self the `Tab` instance\n */\nconst triggerTabEnd = (self: Tab) => {\n  const { tabContent, nav } = self;\n\n  // istanbul ignore else @preserve\n  if (tabContent && hasClass(tabContent, collapsingClass)) {\n    tabContent.style.height = \"\";\n    removeClass(tabContent, collapsingClass);\n  }\n\n  // istanbul ignore else @preserve\n  if (nav) Timer.clear(nav);\n};\n\n/**\n * Executes before showing the tab content.\n *\n * @param self the `Tab` instance\n */\nconst triggerTabShow = (self: Tab) => {\n  const { element, tabContent, content: nextContent, nav } = self;\n  const { tab } = (isHTMLElement(nav) && tabPrivate.get(nav)) ||\n    // istanbul ignore next @preserve\n    { tab: null };\n\n  // istanbul ignore else @preserve\n  if (tabContent && nextContent && hasClass(nextContent, fadeClass)) {\n    const { currentHeight, nextHeight } = tabPrivate.get(element) ||\n      // istanbul ignore next @preserve\n      { currentHeight: 0, nextHeight: 0 };\n    // istanbul ignore else @preserve: vitest won't validate this branch\n    if (currentHeight !== nextHeight) {\n      // enables height animation\n      setTimeout(() => {\n        tabContent.style.height = `${nextHeight}px`;\n        reflow(tabContent);\n        emulateTransitionEnd(tabContent, () => triggerTabEnd(self));\n      }, 50);\n    } else {\n      triggerTabEnd(self);\n    }\n  } else if (nav) Timer.clear(nav);\n\n  shownTabEvent.relatedTarget = tab as HTMLElement | undefined;\n\n  dispatchEvent(element, shownTabEvent);\n};\n\n/**\n * Executes before hiding the tab.\n *\n * @param self the `Tab` instance\n */\nconst triggerTabHide = (self: Tab) => {\n  const { element, content: nextContent, tabContent, nav } = self;\n  const { tab, content } = (nav && tabPrivate.get(nav)) ||\n    // istanbul ignore next @preserve\n    { tab: null, content: null };\n  let currentHeight = 0;\n\n  // istanbul ignore else @preserve\n  if (tabContent && nextContent && hasClass(nextContent, fadeClass)) {\n    [content, nextContent].forEach((c) => {\n      // istanbul ignore else @preserve\n      if (c) addClass(c, \"overflow-hidden\");\n    });\n    currentHeight = content\n      ? content.scrollHeight\n      : /* istanbul ignore next @preserve */ 0;\n  }\n\n  // update relatedTarget and dispatch event\n  showTabEvent.relatedTarget = tab as HTMLElement | undefined;\n  hiddenTabEvent.relatedTarget = element as HTMLElement;\n  dispatchEvent(element, showTabEvent);\n\n  // istanbul ignore if @preserve\n  if (showTabEvent.defaultPrevented) return;\n  // istanbul ignore else @preserve\n  if (nextContent) addClass(nextContent, activeClass);\n  // istanbul ignore else @preserve\n  if (content) removeClass(content, activeClass);\n\n  // istanbul ignore else @preserve\n  if (tabContent && nextContent && hasClass(nextContent, fadeClass)) {\n    const nextHeight = nextContent.scrollHeight;\n    tabPrivate.set(element, {\n      currentHeight,\n      nextHeight,\n      tab: null,\n      content: null,\n    });\n\n    addClass(tabContent, collapsingClass);\n    tabContent.style.height = `${currentHeight}px`;\n    reflow(tabContent);\n    [content, nextContent].forEach((c) => {\n      // istanbul ignore else @preserve\n      if (c) removeClass(c, \"overflow-hidden\");\n    });\n  }\n\n  if (nextContent && nextContent && hasClass(nextContent, fadeClass)) {\n    setTimeout(() => {\n      addClass(nextContent, showClass);\n      emulateTransitionEnd(nextContent, () => {\n        triggerTabShow(self);\n      });\n    }, 1);\n  } else {\n    // istanbul ignore else @preserve\n    if (nextContent) addClass(nextContent, showClass);\n    triggerTabShow(self);\n  }\n\n  // istanbul ignore else @preserve\n  if (tab) dispatchEvent(tab, hiddenTabEvent);\n};\n\n/**\n * Returns the current active tab and its target content.\n *\n * @param self the `Tab` instance\n * @returns the query result\n */\nconst getActiveTab = (\n  self: Tab,\n): { tab: HTMLElement | null; content: HTMLElement | null } => {\n  const { nav } = self;\n  // istanbul ignore next @preserve\n  if (!isHTMLElement(nav)) {\n    return { tab: null, content: null };\n  }\n\n  const activeTabs = getElementsByClassName<HTMLElement>(\n    activeClass,\n    nav,\n  );\n  let tab: HTMLElement | null = null;\n  // istanbul ignore else @preserve\n  if (\n    activeTabs.length === 1 &&\n    !dropdownClasses.some((c) =>\n      hasClass(activeTabs[0].parentElement as HTMLElement, c)\n    )\n  ) {\n    [tab] = activeTabs;\n  } else if (activeTabs.length > 1) {\n    tab = activeTabs[activeTabs.length - 1];\n  }\n  const content = isHTMLElement(tab) ? getTargetElement(tab) : null;\n  return { tab, content };\n};\n\n/**\n * Returns a parent dropdown.\n *\n * @param element the `Tab` element\n * @returns the parent dropdown\n */\nconst getParentDropdown = (element?: HTMLElement) => {\n  // istanbul ignore next @preserve\n  if (!isHTMLElement(element)) return null;\n  const dropdown = closest(element, `.${dropdownClasses.join(\",.\")}`);\n  return dropdown\n    ? querySelector<HTMLElement>(`.${dropdownClasses[0]}-toggle`, dropdown)\n    : null;\n};\n\n// TAB EVENT HANDLER\n// =================\n/**\n * Handles the `click` event listener.\n *\n * @param e the `Event` object\n */\nconst tabClickHandler = (e: MouseEvent<Element>) => {\n  const element = closest(e.target, tabSelector);\n  const self = element && getTabInstance(element);\n\n  // istanbul ignore if @preserve\n  if (!self) return;\n  e.preventDefault();\n  self.show();\n};\n\n// TAB DEFINITION\n// ==============\n/** Creates a new `Tab` instance. */\nexport default class Tab extends BaseComponent {\n  static selector = tabSelector;\n  static init = tabInitCallback;\n  static getInstance = getTabInstance;\n  declare element: HTMLElement;\n  declare nav: HTMLElement | null;\n  declare content: HTMLElement | null;\n  declare tabContent: HTMLElement | null;\n  declare nextContent: HTMLElement | null;\n  declare dropdown: HTMLElement | null;\n\n  /** @param target the target element */\n  constructor(target: Element | string) {\n    super(target);\n\n    // initialization element\n    const { element } = this;\n    const content = getTargetElement(element);\n\n    // no point initializing a tab without a corresponding content\n    // istanbul ignore else @preserve\n    if (!content) return;\n\n    const nav = closest<HTMLElement>(element, \".nav\");\n    const container = closest<HTMLElement>(\n      content as HTMLElement,\n      \".tab-content\",\n    );\n\n    this.nav = nav;\n    this.content = content;\n    this.tabContent = container;\n\n    // event targets\n    this.dropdown = getParentDropdown(element);\n\n    // show first Tab instance of none is shown\n    // suggested on #432\n    const { tab } = getActiveTab(this);\n    if (nav && !tab) {\n      const firstTab = querySelector(tabSelector, nav);\n      const firstTabContent = firstTab && getTargetElement(firstTab);\n\n      // istanbul ignore else @preserve\n      if (firstTabContent) {\n        addClass(firstTab, activeClass);\n        addClass(firstTabContent, showClass);\n        addClass(firstTabContent, activeClass);\n        setAttribute(element, ariaSelected, \"true\");\n      }\n    }\n\n    // add event listener\n    this._toggleEventListeners(true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tabComponent;\n  }\n\n  // TAB PUBLIC METHODS\n  // ==================\n  /** Shows the tab to the user. */\n  show() {\n    const { element, content: nextContent, nav, dropdown } = this;\n\n    // istanbul ignore else @preserve\n    if ((nav && Timer.get(nav)) || hasClass(element, activeClass)) return;\n    const { tab, content } = getActiveTab(this);\n\n    // istanbul ignore else @preserve\n    if (nav && tab) {\n      tabPrivate.set(nav, { tab, content, currentHeight: 0, nextHeight: 0 });\n    }\n\n    // update relatedTarget and dispatch\n    hideTabEvent.relatedTarget = element as HTMLElement;\n\n    // istanbul ignore if @preserve\n    if (!isHTMLElement(tab)) return;\n\n    dispatchEvent(tab, hideTabEvent);\n\n    // istanbul ignore else @preserve\n    if (hideTabEvent.defaultPrevented) return;\n\n    addClass(element, activeClass);\n    setAttribute(element, ariaSelected, \"true\");\n\n    const activeDropdown = isHTMLElement(tab) && getParentDropdown(tab);\n    if (activeDropdown && hasClass(activeDropdown, activeClass)) {\n      removeClass(activeDropdown, activeClass);\n    }\n\n    // istanbul ignore else @preserve\n    if (nav) {\n      const toggleTab = () => {\n        // istanbul ignore else @preserve\n        if (tab) {\n          removeClass(tab, activeClass);\n          setAttribute(tab, ariaSelected, \"false\");\n        }\n        if (dropdown && !hasClass(dropdown, activeClass)) {\n          addClass(dropdown, activeClass);\n        }\n      };\n\n      if (\n        content &&\n        (hasClass(content, fadeClass) ||\n          (nextContent && hasClass(nextContent, fadeClass)))\n      ) {\n        Timer.set(nav, toggleTab, 1);\n      } else toggleTab();\n    }\n\n    // istanbul ignore else @preserve\n    if (content) {\n      removeClass(content, showClass);\n      if (hasClass(content, fadeClass)) {\n        emulateTransitionEnd(content, () => triggerTabHide(this));\n      } else {\n        triggerTabHide(this);\n      }\n    }\n  }\n\n  /**\n   * Toggles on/off the `click` event listener.\n   *\n   * @param add when `true`, event listener is added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    action(this.element, mouseclickEvent, tabClickHandler);\n  };\n\n  /** Removes the `Tab` component from the target element. */\n  dispose() {\n    this._toggleEventListeners();\n    super.dispose();\n  }\n}\n"],"names":["tabString","tabComponent","tabSelector","dataBsToggle","getTabInstance","element","getInstance","tabInitCallback","Tab","showTabEvent","createCustomEvent","shownTabEvent","hideTabEvent","hiddenTabEvent","tabPrivate","triggerTabEnd","self","tabContent","nav","hasClass","collapsingClass","removeClass","Timer","triggerTabShow","nextContent","tab","isHTMLElement","fadeClass","currentHeight","nextHeight","reflow","emulateTransitionEnd","dispatchEvent","triggerTabHide","content","c","addClass","activeClass","showClass","getActiveTab","activeTabs","getElementsByClassName","dropdownClasses","getTargetElement","getParentDropdown","dropdown","closest","querySelector","tabClickHandler","e","BaseComponent","target","container","firstTab","firstTabContent","setAttribute","ariaSelected","activeDropdown","toggleTab","add","addListener","removeListener","mouseclickEvent"],"mappings":"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"}