{"version":3,"file":"tooltip-Dh4nNEki.js","sources":["../../src/strings/popoverString.ts","../../src/strings/popoverComponent.ts","../../src/strings/tooltipString.ts","../../src/util/getTipTemplate.ts","../../src/util/tipClassPositions.ts","../../src/util/styleTip.ts","../../src/util/tooltipDefaults.ts","../../src/strings/dataOriginalTitle.ts","../../src/strings/tooltipComponent.ts","../../src/util/setHtml.ts","../../src/util/createTip.ts","../../src/util/getElementContainer.ts","../../src/components/tooltip.ts"],"sourcesContent":["/** @type {string} */\nconst popoverString = \"popover\";\nexport default popoverString;\n","/** @type {string} */\nconst popoverComponent = \"Popover\";\nexport default popoverComponent;\n","/** @type {string} */\nconst tooltipString = \"tooltip\";\nexport default tooltipString;\n","import tooltipString from \"../strings/tooltipString\";\n\n/**\n * Returns a template for Popover / Tooltip.\n *\n * @param tipType the expected markup type\n * @returns the template markup\n */\nconst getTipTemplate = (tipType: string) => {\n  const isTooltip = tipType === tooltipString;\n  const bodyClass = isTooltip ? `${tipType}-inner` : `${tipType}-body`;\n  const header = !isTooltip ? `<h3 class=\"${tipType}-header\"></h3>` : \"\";\n  const arrow = `<div class=\"${tipType}-arrow\"></div>`;\n  const body = `<div class=\"${bodyClass}\"></div>`;\n  return `<div class=\"${tipType}\" role=\"${tooltipString}\">${\n    header + arrow + body\n  }</div>`;\n};\n\nexport default getTipTemplate;\n","const tipClassPositions = {\n  top: \"top\",\n  bottom: \"bottom\",\n  left: \"start\",\n  right: \"end\",\n};\n\nexport default tipClassPositions;\n","import {\n  createCustomEvent,\n  dispatchEvent,\n  getBoundingClientRect,\n  getDocumentElement,\n  getElementStyle,\n  getNodeScroll,\n  getRectRelativeToOffsetParent,\n  isHTMLElement,\n  isRTL,\n  setElementStyle,\n  toLowerCase,\n} from \"@thednp/shorty\";\n\nimport tipClassPositions from \"./tipClassPositions\";\nimport Tooltip from \"../components/tooltip\";\nimport type { TooltipEvent } from \"../interface/tooltip\";\nimport type { PopoverEvent } from \"../interface/popover\";\n\n/**\n * Style popovers and tooltips.\n *\n * @param self the `Popover` / `Tooltip` instance\n */\nconst styleTip = (self: Tooltip) => {\n  requestAnimationFrame(() => {\n    const tipClasses = /\\b(top|bottom|start|end)+/;\n    const { element, tooltip, container, offsetParent, options, arrow } = self;\n\n    // istanbul ignore if @preserve\n    if (!tooltip) return;\n    const RTL = isRTL(element);\n    const { x: scrollLeft, y: scrollTop } = getNodeScroll(offsetParent);\n\n    // reset tooltip style (top: 0, left: 0 works best)\n    setElementStyle(tooltip, {\n      top: \"\",\n      left: \"\",\n      right: \"\",\n      bottom: \"\",\n    });\n    const { offsetWidth: tipWidth, offsetHeight: tipHeight } = tooltip;\n    const { clientWidth: htmlcw, clientHeight: htmlch, offsetWidth: htmlow } =\n      getDocumentElement(element);\n    let { placement } = options;\n    const { clientWidth: parentCWidth, offsetWidth: parentOWidth } = container;\n    const parentPosition = getElementStyle(\n      container,\n      \"position\",\n    );\n    const fixedParent = parentPosition === \"fixed\";\n    const scrollbarWidth = fixedParent\n      ? Math.abs(parentCWidth - parentOWidth)\n      : Math.abs(htmlcw - htmlow);\n    const leftBoundry = RTL && fixedParent\n      ? /* istanbul ignore next @preserve */ scrollbarWidth\n      : 0;\n    const rightBoundry = htmlcw - (!RTL ? scrollbarWidth : 0) - 1;\n\n    // reuse observer entry bounding box\n    const observerEntry = self._observer.getEntry(element);\n    const {\n      width: elemWidth,\n      height: elemHeight,\n      left: elemRectLeft,\n      right: elemRectRight,\n      top: elemRectTop,\n    } = observerEntry?.boundingClientRect ||\n      getBoundingClientRect(element, true);\n\n    const {\n      x: elemOffsetLeft,\n      y: elemOffsetTop,\n    } = getRectRelativeToOffsetParent(\n      element,\n      offsetParent,\n      { x: scrollLeft, y: scrollTop },\n    );\n\n    // reset arrow style\n    setElementStyle(arrow as HTMLElement, {\n      top: \"\",\n      left: \"\",\n      right: \"\",\n      bottom: \"\",\n    });\n    let topPosition: number | string = 0;\n    let bottomPosition: number | string = \"\";\n    let leftPosition: number | string = 0;\n    let rightPosition: number | string = \"\";\n    let arrowTop: number | string = \"\";\n    let arrowLeft: number | string = \"\";\n    let arrowRight: number | string = \"\";\n\n    const arrowWidth = arrow.offsetWidth || 0;\n    const arrowHeight = arrow.offsetHeight || 0;\n    const arrowAdjust = arrowWidth / 2;\n\n    // check placement\n    let topExceed = elemRectTop - tipHeight - arrowHeight < 0;\n    let bottomExceed =\n      elemRectTop + tipHeight + elemHeight + arrowHeight >= htmlch;\n    let leftExceed = elemRectLeft - tipWidth - arrowWidth < leftBoundry;\n    let rightExceed =\n      elemRectLeft + tipWidth + elemWidth + arrowWidth >= rightBoundry;\n\n    const horizontals = [\"left\", \"right\"];\n    const verticals = [\"top\", \"bottom\"];\n\n    topExceed = horizontals.includes(placement)\n      ? elemRectTop + elemHeight / 2 - tipHeight / 2 - arrowHeight < 0\n      : topExceed;\n    bottomExceed = horizontals.includes(placement)\n      ? elemRectTop + tipHeight / 2 + elemHeight / 2 + arrowHeight >= htmlch\n      : bottomExceed;\n    leftExceed = verticals.includes(placement)\n      ? elemRectLeft + elemWidth / 2 - tipWidth / 2 < leftBoundry\n      : leftExceed;\n    rightExceed = verticals.includes(placement)\n      ? elemRectLeft + tipWidth / 2 + elemWidth / 2 >= rightBoundry\n      : rightExceed;\n\n    // first remove side positions if both left and right limits are exceeded\n    // we usually fall back to top|bottom\n    placement = horizontals.includes(placement) && leftExceed && rightExceed\n      ? \"top\"\n      : placement;\n    // recompute placement\n    placement = placement === \"top\" && topExceed ? \"bottom\" : placement;\n    placement = placement === \"bottom\" && bottomExceed ? \"top\" : placement;\n    placement = placement === \"left\" && leftExceed ? \"right\" : placement;\n    placement = placement === \"right\" && rightExceed\n      ? \"left\"\n      // istanbul ignore next @preserve\n      : placement;\n\n    // update tooltip/popover class\n    // istanbul ignore else @preserve\n    if (!tooltip.className.includes(placement)) {\n      tooltip.className = tooltip.className.replace(\n        tipClasses,\n        tipClassPositions[placement],\n      );\n    }\n\n    // compute tooltip / popover coordinates\n    // istanbul ignore else @preserve\n    if (horizontals.includes(placement)) {\n      // secondary|side positions\n      if (placement === \"left\") {\n        // LEFT\n        leftPosition = elemOffsetLeft - tipWidth - arrowWidth;\n      } else {\n        // RIGHT\n        leftPosition = elemOffsetLeft + elemWidth + arrowWidth;\n      }\n\n      // adjust top and arrow\n      if (topExceed && bottomExceed) {\n        topPosition = 0;\n        bottomPosition = 0;\n        arrowTop = elemOffsetTop + elemHeight / 2 - arrowHeight / 2;\n      } else if (topExceed) {\n        topPosition = elemOffsetTop;\n        bottomPosition = \"\";\n        arrowTop = elemHeight / 2 - arrowWidth;\n      } else if (bottomExceed) {\n        topPosition = elemOffsetTop - tipHeight + elemHeight;\n        bottomPosition = \"\";\n        arrowTop = tipHeight - elemHeight / 2 - arrowWidth;\n      } else {\n        topPosition = elemOffsetTop - tipHeight / 2 + elemHeight / 2;\n        arrowTop = tipHeight / 2 - arrowHeight / 2;\n      }\n    } else if (verticals.includes(placement)) {\n      if (placement === \"top\") {\n        topPosition = elemOffsetTop - tipHeight - arrowHeight;\n      } else {\n        // BOTTOM\n        topPosition = elemOffsetTop + elemHeight + arrowHeight;\n      }\n\n      // adjust left | right and also the arrow\n      if (leftExceed) {\n        leftPosition = 0;\n        arrowLeft = elemOffsetLeft + elemWidth / 2 - arrowAdjust;\n      } else if (rightExceed) {\n        leftPosition = \"auto\";\n        rightPosition = 0;\n        arrowRight = elemWidth / 2 + rightBoundry - elemRectRight - arrowAdjust;\n      } else {\n        leftPosition = elemOffsetLeft - tipWidth / 2 + elemWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    }\n\n    // apply style to tooltip/popover\n    setElementStyle(tooltip, {\n      top: `${topPosition}px`,\n      bottom: bottomPosition === \"\" ? \"\" : `${bottomPosition}px`,\n      left: leftPosition === \"auto\" ? leftPosition : `${leftPosition}px`,\n      right: rightPosition !== \"\" ? `${rightPosition}px` : \"\",\n    });\n\n    // update arrow placement\n    // istanbul ignore else @preserve\n    if (isHTMLElement(arrow)) {\n      if (arrowTop !== \"\") {\n        arrow.style.top = `${arrowTop}px`;\n      }\n      if (arrowLeft !== \"\") {\n        arrow.style.left = `${arrowLeft}px`;\n      } else if (arrowRight !== \"\") {\n        arrow.style.right = `${arrowRight}px`;\n      }\n    }\n    const updatedTooltipEvent = createCustomEvent<\n      Record<string, unknown>,\n      TooltipEvent | PopoverEvent\n    >(\n      `updated.bs.${toLowerCase(self.name)}`,\n    );\n    dispatchEvent(element, updatedTooltipEvent);\n  });\n};\n\nexport default styleTip;\n","import getTipTemplate from \"./getTipTemplate\";\nimport tooltipString from \"../strings/tooltipString\";\nimport { TooltipOptions } from \"../interface/tooltip\";\n\nconst tooltipDefaults: TooltipOptions = {\n  template: getTipTemplate(tooltipString),\n  title: \"\",\n  customClass: \"\",\n  trigger: \"hover focus\",\n  placement: \"top\",\n  sanitizeFn: undefined,\n  animation: true,\n  delay: 200,\n  container: document.body,\n  content: \"\",\n  dismissible: false,\n  btnClose: \"\",\n};\nexport default tooltipDefaults;\n","/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = \"data-original-title\";\nexport default dataOriginalTitle;\n","/** @type {string} */\nconst tooltipComponent = \"Tooltip\";\nexport default tooltipComponent;\n","import {\n  isArray,\n  isFunction,\n  isHTMLElement,\n  isNode,\n  isNodeList,\n  isString,\n} from \"@thednp/shorty\";\n\n/**\n * Append an existing `Element` to Popover / Tooltip component or HTML\n * markup string to be parsed & sanitized to be used as popover / tooltip content.\n *\n * @param element target\n * @param content the `Element` to append / string\n * @param sanitizeFn a function to sanitize string content\n */\nconst setHtml = (\n  element: HTMLElement,\n  content: Node[] | Node | string,\n  sanitizeFn?: (s: string) => string,\n) => {\n  // istanbul ignore else @preserve\n  if (isString(content) && content.length) {\n    let dirty = content.trim(); // fixing #233\n    if (isFunction(sanitizeFn)) dirty = sanitizeFn(dirty);\n\n    const domParser = new DOMParser();\n    const tempDocument = domParser.parseFromString(dirty, \"text/html\");\n    element.append(...[...tempDocument.body.childNodes]);\n  } else if (isHTMLElement(content)) {\n    element.append(content);\n  } else if (\n    isNodeList(content) || (isArray(content) && content.every(isNode))\n  ) {\n    element.append(...[...content]);\n  }\n};\nexport default setHtml;\n","import {\n  addClass,\n  createElement,\n  hasClass,\n  isHTMLElement,\n  isRTL,\n  querySelector,\n  setAttribute,\n} from \"@thednp/shorty\";\n\nimport tooltipComponent from \"../strings/tooltipComponent\";\nimport tooltipString from \"../strings/tooltipString\";\nimport popoverString from \"../strings/popoverString\";\nimport fadeClass from \"../strings/fadeClass\";\nimport tipClassPositions from \"./tipClassPositions\";\nimport setHtml from \"./setHtml\";\nimport Tooltip from \"../components/tooltip\";\nimport Popover from \"../components/popover\";\n\n/**\n * Creates a new tooltip / popover.\n *\n * @param self the `Tooltip` / `Popover` instance\n */\nconst createTip = (self: Tooltip | Popover) => {\n  const isTooltip = self.name === tooltipComponent;\n\n  const { id, element, options } = self;\n  const {\n    title,\n    placement,\n    template,\n    animation,\n    customClass,\n    sanitizeFn,\n    dismissible,\n    content,\n    btnClose,\n  } = options;\n  const tipString = isTooltip ? tooltipString : popoverString;\n  const tipPositions = { ...tipClassPositions };\n  let titleParts: Node[] = [];\n  let contentParts: Node[] = [];\n\n  if (isRTL(element)) {\n    tipPositions.left = \"end\";\n    tipPositions.right = \"start\";\n  }\n\n  // set initial popover class\n  const placementClass = `bs-${tipString}-${tipPositions[placement]}`;\n\n  // load template\n  let tooltipTemplate: Node | string;\n  if (isHTMLElement(template)) {\n    tooltipTemplate = template;\n  } else {\n    const htmlMarkup = createElement(\"div\") as HTMLElement;\n    setHtml(htmlMarkup, template, sanitizeFn);\n    tooltipTemplate = htmlMarkup.firstChild as HTMLElement;\n  }\n\n  /* istanbul ignore if @preserve */\n  if (!isHTMLElement(tooltipTemplate)) return;\n\n  // set popover markup\n  self.tooltip = tooltipTemplate.cloneNode(true) as HTMLElement;\n  const { tooltip } = self;\n\n  // set id and role attributes\n  setAttribute(tooltip, \"id\", id);\n  setAttribute(tooltip, \"role\", tooltipString);\n\n  const bodyClass = isTooltip\n    ? `${tooltipString}-inner`\n    : `${popoverString}-body`;\n  const tooltipHeader = isTooltip\n    ? null\n    : querySelector<HTMLElement>(`.${popoverString}-header`, tooltip);\n  const tooltipBody = querySelector<HTMLElement>(`.${bodyClass}`, tooltip);\n\n  // set arrow and enable access for styleTip\n  self.arrow = querySelector<HTMLElement>(\n    `.${tipString}-arrow`,\n    tooltip,\n  ) as HTMLElement;\n  const { arrow } = self;\n\n  if (isHTMLElement(title)) titleParts = [title.cloneNode(true)];\n  else {\n    const tempTitle = createElement(\"div\") as HTMLElement;\n    setHtml(tempTitle, title, sanitizeFn);\n    titleParts = [...[...tempTitle.childNodes]];\n  }\n\n  if (isHTMLElement(content)) contentParts = [content.cloneNode(true)];\n  else {\n    const tempContent = createElement(\"div\") as HTMLElement;\n    setHtml(tempContent, content, sanitizeFn);\n    contentParts = [...[...tempContent.childNodes]];\n  }\n\n  // set dismissible button\n  if (dismissible) {\n    if (title) {\n      if (isHTMLElement(btnClose)) {\n        titleParts = [...titleParts, btnClose.cloneNode(true)];\n      } else {\n        const tempBtn = createElement(\"div\") as HTMLElement;\n        setHtml(tempBtn, btnClose, sanitizeFn);\n        titleParts = [...titleParts, tempBtn.firstChild as Node];\n      }\n    } else {\n      // istanbul ignore else @preserve\n      if (tooltipHeader) tooltipHeader.remove();\n      if (isHTMLElement(btnClose)) {\n        contentParts = [...contentParts, btnClose.cloneNode(true)];\n      } else {\n        const tempBtn = createElement(\"div\") as HTMLElement;\n        setHtml(tempBtn, btnClose, sanitizeFn);\n        contentParts = [...contentParts, tempBtn.firstChild as Node];\n      }\n    }\n  }\n\n  // fill the template with content from options / data attributes\n  // also sanitize title && content\n  // istanbul ignore else @preserve\n  if (!isTooltip) {\n    // istanbul ignore else @preserve\n    if (title && tooltipHeader) {\n      setHtml(tooltipHeader, titleParts, sanitizeFn);\n    }\n    // istanbul ignore else @preserve\n    if (content && tooltipBody) {\n      setHtml(tooltipBody, contentParts, sanitizeFn);\n    }\n    // set btn\n    self.btn = querySelector<HTMLButtonElement>(\".btn-close\", tooltip) ||\n      undefined;\n  } else if (title && tooltipBody) setHtml(tooltipBody, title, sanitizeFn);\n\n  // Bootstrap 5.2.x\n  addClass(tooltip, \"position-absolute\");\n  addClass(arrow, \"position-absolute\");\n\n  // set popover animation and placement\n  // istanbul ignore else @preserve\n  if (!hasClass(tooltip, tipString)) addClass(tooltip, tipString);\n  // istanbul ignore else @preserve\n  if (animation && !hasClass(tooltip, fadeClass)) {\n    addClass(tooltip, fadeClass);\n  }\n  // istanbul ignore else @preserve\n  if (customClass && !hasClass(tooltip, customClass)) {\n    addClass(tooltip, customClass);\n  }\n  // istanbul ignore else @preserve\n  if (!hasClass(tooltip, placementClass)) addClass(tooltip, placementClass);\n};\n\nexport default createTip;\n","import {\n  getDocument,\n  getElementStyle,\n  getParentNode,\n  isShadowRoot,\n  isTableElement,\n} from \"@thednp/shorty\";\n\n/**\n * Returns an `HTMLElement` to be used as default value for *options.container*\n * for `Tooltip` / `Popover` components.\n *\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param element the target\n * @returns the query result\n */\nconst getElementContainer = (element: Element) => {\n  const majorBlockTags = [\"HTML\", \"BODY\"];\n  const containers: HTMLElement[] = [];\n  let { parentNode } = element;\n\n  while (parentNode && !majorBlockTags.includes(parentNode.nodeName)) {\n    parentNode = getParentNode(parentNode) as HTMLElement;\n    // istanbul ignore else @preserve\n    if (!(isShadowRoot(parentNode) || isTableElement(parentNode))) {\n      containers.push(parentNode as HTMLElement);\n    }\n  }\n\n  return (\n    containers.find((c, i) => {\n      if (\n        ((getElementStyle(c, \"position\") !== \"relative\" ||\n          getElementStyle(c, \"position\") === \"relative\" &&\n            c.offsetHeight !== c.scrollHeight) &&\n          containers.slice(i + 1).every((r) =>\n            getElementStyle(r, \"position\") === \"static\"\n          ))\n      ) {\n        return c;\n      }\n      return null;\n    }) ||\n    /* istanbul ignore next: optional guard */\n    getDocument(element).body\n  );\n};\n\nexport default getElementContainer;\n","/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\nimport {\n  addClass,\n  ariaDescribedBy,\n  closest,\n  createCustomEvent,\n  dispatchEvent,\n  emulateTransitionEnd,\n  focus,\n  focusEvent,\n  focusinEvent,\n  focusoutEvent,\n  getAttribute,\n  getDocument,\n  getElementStyle,\n  getInstance,\n  getUID,\n  getWindow,\n  hasAttribute,\n  hasClass,\n  isApple,\n  mouseclickEvent,\n  mousedownEvent,\n  mouseenterEvent,\n  mousehoverEvent,\n  mouseleaveEvent,\n  ObjectAssign,\n  passiveHandler,\n  removeAttribute,\n  removeClass,\n  setAttribute,\n  Timer,\n  toLowerCase,\n  TouchEvent,\n  touchstartEvent,\n} from \"@thednp/shorty\";\n\nimport { addListener, removeListener } from \"@thednp/event-listener\";\nimport PositionObserver from \"@thednp/position-observer\";\n\nimport dataBsToggle from \"~/strings/dataBsToggle\";\nimport dataOriginalTitle from \"~/strings/dataOriginalTitle\";\nimport showClass from \"~/strings/showClass\";\nimport tooltipString from \"~/strings/tooltipString\";\nimport tooltipComponent from \"~/strings/tooltipComponent\";\nimport popoverString from \"~/strings/popoverString\";\nimport popoverComponent from \"~/strings/popoverComponent\";\nimport modalString from \"~/strings/modalString\";\nimport offcanvasString from \"~/strings/offcanvasString\";\n\nimport styleTip from \"~/util/styleTip\";\nimport createTip from \"~/util/createTip\";\nimport { appendPopup, hasPopup, removePopup } from \"~/util/popupContainer\";\nimport getElementContainer from \"~/util/getElementContainer\";\nimport tooltipDefaults from \"~/util/tooltipDefaults\";\nimport BaseComponent from \"./base-component\";\nimport type { TooltipEvent, TooltipOptions } from \"~/interface/tooltip\";\nimport type { PopoverEvent, PopoverOptions } from \"~/interface/popover\";\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector =\n  `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = \"title\";\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n */\nlet getTooltipInstance = (element: Element) =>\n  getInstance<Tooltip>(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n */\nconst tooltipInitCallback = (element: Element) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param self the `Tooltip` instance\n */\nconst removeTooltip = (self: Tooltip) => {\n  const { element, tooltip, container } = self;\n  removeAttribute(element, ariaDescribedBy);\n  removePopup(\n    tooltip,\n    container,\n  );\n};\n\n/**\n * Check if container contains the tooltip.\n *\n * @param self Tooltip\n */\nconst hasTip = (self: Tooltip): boolean | undefined => {\n  const { tooltip, container } = self;\n\n  return tooltip &&\n    hasPopup(tooltip, container);\n};\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param self the `Tooltip` instance\n * @param callback the parent dispose callback\n */\nconst disposeTooltipComplete = (self: Tooltip, callback?: () => void) => {\n  const { element } = self;\n  self._toggleEventListeners();\n\n  // istanbul ignore else @preserve\n  if (\n    hasAttribute(element, dataOriginalTitle) && self.name === tooltipComponent\n  ) {\n    toggleTooltipTitle(self);\n  }\n  // istanbul ignore else @preserve\n  if (callback) callback();\n};\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipAction = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element } = self;\n\n  action(\n    getDocument(element),\n    touchstartEvent,\n    self.handleTouch,\n    passiveHandler,\n  );\n};\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipShownAction = (self: Tooltip) => {\n  const { element } = self;\n  const shownTooltipEvent = createCustomEvent<\n    Record<string, never>,\n    TooltipEvent | PopoverEvent\n  >(\n    `shown.bs.${toLowerCase(self.name)}`,\n  );\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, \"in\");\n};\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param self the `Tooltip` instance\n */\nconst tooltipHiddenAction = (self: Tooltip) => {\n  const { element } = self;\n  const hiddenTooltipEvent = createCustomEvent<\n    Record<string, never>,\n    TooltipEvent | PopoverEvent\n  >(\n    `hidden.bs.${toLowerCase(self.name)}`,\n  );\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n\n  Timer.clear(element, \"out\");\n};\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param self the `Tooltip` instance\n * @param add when `true`, event listeners are added\n */\nconst toggleTooltipOpenHandlers = (self: Tooltip, add?: boolean) => {\n  const action = add ? addListener : removeListener;\n  const { element, tooltip } = self;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  if (add) {\n    [element, tooltip]\n      .forEach((target) => self._observer.observe(target));\n  } else self._observer.disconnect();\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) {\n    action(parentModal, `hide.bs.${modalString}`, self.handleHide);\n  }\n  if (parentOffcanvas) {\n    action(parentOffcanvas, `hide.bs.${offcanvasString}`, self.handleHide);\n  }\n};\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param self the `Tooltip` instance\n * @param content when `true`, event listeners are added\n */\nconst toggleTooltipTitle = (self: Tooltip, content?: string) => {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(\n    element,\n    titleAtt[content ? 0 : 1],\n    content ||\n      getAttribute(element, titleAtt[0]) ||\n      // istanbul ignore next @preserve\n      \"\",\n  );\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n};\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nexport default class Tooltip extends BaseComponent {\n  static selector = tooltipSelector;\n  static init = tooltipInitCallback;\n  static getInstance = getTooltipInstance;\n  static styleTip = styleTip;\n  declare element: Element & HTMLOrSVGElement;\n  declare options: TooltipOptions;\n  declare btn?: HTMLElement;\n  declare tooltip: HTMLElement;\n  declare container: HTMLElement;\n  declare offsetParent: Element | Window;\n  declare arrow: HTMLElement;\n  declare enabled: boolean;\n  declare id: string;\n  declare _observer: PositionObserver;\n\n  /**\n   * @param target the target element\n   * @param config the instance options\n   */\n  constructor(target: Element | string, config?: Partial<TooltipOptions>) {\n    super(target, config);\n\n    const { element } = this;\n    const isTooltip = this.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    // istanbul ignore next @preserve: this is to set Popover too\n    getTooltipInstance = <T extends Tooltip>(elem: Element) =>\n      getInstance<T>(elem, tipComponent);\n\n    // additional properties\n    this.enabled = true;\n    /** Set unique ID for `aria-describedby`. */\n    this.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = this;\n\n    // invalidate\n    // istanbul ignore else @preserve\n    if (((!options.title && isTooltip) || (!isTooltip && !options.content))) {\n      return;\n    }\n\n    // reset default options\n    ObjectAssign(tooltipDefaults, { titleAttr: \"\" });\n\n    // set title attributes and add event listeners\n    // istanbul ignore else @preserve\n    if (\n      hasAttribute(element, titleAttr) && isTooltip &&\n      typeof options.title === \"string\"\n    ) {\n      toggleTooltipTitle(this, options.title);\n    }\n\n    // set containers\n    const container = getElementContainer(element);\n    const offsetParent = [\"sticky\", \"fixed\", \"relative\"].some(\n        (position) =>\n          getElementStyle(container, \"position\") ===\n            position,\n      )\n      ? container\n      : getWindow(element);\n\n    this.container = container;\n    this.offsetParent = offsetParent;\n\n    // create tooltip here\n    createTip(this);\n\n    /* istanbul ignore if @preserve */\n    if (!this.tooltip) return;\n\n    // create observer\n    this._observer = new PositionObserver(() => this.update());\n\n    // attach events\n    this._toggleEventListeners(true);\n  }\n\n  /**\n   * Returns component name string.\n   */\n  get name() {\n    return tooltipComponent;\n  }\n  /**\n   * Returns component default options.\n   */\n  get defaults() {\n    return tooltipDefaults;\n  }\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /** Handles the focus event on iOS. */\n  // istanbul ignore next @preserve - impossible to test without Apple device\n  handleFocus = () => focus(this.element as HTMLElement);\n  /** Shows the tooltip. */\n  handleShow = () => this.show();\n  show() {\n    const { options, tooltip, element, container, id } = this;\n    const { animation } = options;\n    const outTimer = Timer.get(element, \"out\");\n\n    Timer.clear(element, \"out\");\n\n    if (tooltip && !outTimer && !hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const showTooltipEvent = createCustomEvent<\n            Record<string, never>,\n            TooltipEvent | PopoverEvent\n          >(\n            `show.bs.${toLowerCase(this.name)}`,\n          );\n          dispatchEvent(element, showTooltipEvent);\n\n          // istanbul ignore else @preserve\n          if (!showTooltipEvent.defaultPrevented) {\n            // append to container\n            appendPopup(tooltip, container);\n\n            setAttribute(element, ariaDescribedBy, `#${id}`);\n\n            this.update();\n            toggleTooltipOpenHandlers(this, true);\n\n            // istanbul ignore else @preserve\n            if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n            // istanbul ignore else @preserve\n            if (animation) {\n              emulateTransitionEnd(tooltip, () => tooltipShownAction(this));\n            } else tooltipShownAction(this);\n          }\n        },\n        17,\n        \"in\",\n      );\n    }\n  }\n\n  /** Hides the tooltip. */\n  handleHide = () => this.hide();\n  hide() {\n    const { options, tooltip, element } = this;\n    const { animation, delay } = options;\n\n    Timer.clear(element, \"in\");\n\n    // istanbul ignore else @preserve\n    if (tooltip && hasTip(this)) {\n      Timer.set(\n        element,\n        () => {\n          const hideTooltipEvent = createCustomEvent<\n            Record<string, never>,\n            TooltipEvent | PopoverEvent\n          >(\n            `hide.bs.${toLowerCase(this.name)}`,\n          );\n          dispatchEvent(element, hideTooltipEvent);\n\n          // istanbul ignore else @preserve\n          if (!hideTooltipEvent.defaultPrevented) {\n            this.update();\n            removeClass(tooltip, showClass);\n            toggleTooltipOpenHandlers(this);\n\n            // istanbul ignore else @preserve\n            if (animation) {\n              emulateTransitionEnd(tooltip, () => tooltipHiddenAction(this));\n            } else tooltipHiddenAction(this);\n          }\n        },\n        delay + 17,\n        \"out\",\n      );\n    }\n  }\n\n  /** Updates the tooltip position. */\n  update = () => {\n    styleTip(this);\n  };\n\n  /** Toggles the tooltip visibility. */\n  toggle = () => {\n    const { tooltip } = this;\n\n    if (tooltip && !hasTip(this)) this.show();\n    else this.hide();\n  };\n\n  /** Enables the tooltip. */\n  enable() {\n    const { enabled } = this;\n    // istanbul ignore else @preserve\n    if (!enabled) {\n      this._toggleEventListeners(true);\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const { tooltip, enabled } = this;\n    // istanbul ignore else @preserve\n    if (enabled) {\n      if (tooltip && hasTip(this)) this.hide();\n      this._toggleEventListeners();\n      this.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    if (!this.enabled) this.enable();\n    else this.disable();\n  }\n\n  /**\n   * Handles the `touchstart` event listener for `Tooltip`\n   *\n   * @this {Tooltip}\n   * @param {TouchEvent} e the `Event` object\n   */\n  handleTouch = ({ target }: TouchEvent) => {\n    const { tooltip, element } = this;\n\n    // istanbul ignore if @preserve\n    if (\n      (tooltip && tooltip.contains(target)) ||\n      target === element ||\n      (target && element.contains(target))\n    ) {\n      // smile for ESLint\n    } else {\n      this.hide();\n    }\n  };\n\n  /**\n   * Toggles on/off the `Tooltip` event listeners.\n   *\n   * @param add when `true`, event listeners are added\n   */\n  _toggleEventListeners = (add?: boolean) => {\n    const action = add ? addListener : removeListener;\n    // btn is only for dismissible popover\n    const { element, options, btn } = this;\n    const { trigger } = options;\n    const isPopover = this.name !== tooltipComponent;\n    const dismissible = isPopover && (options as PopoverOptions).dismissible\n      ? true\n      : false;\n\n    // istanbul ignore else @preserve\n    if (!trigger.includes(\"manual\")) {\n      this.enabled = !!add;\n\n      const triggerOptions = trigger.split(\" \");\n\n      triggerOptions.forEach((tr) => {\n        // istanbul ignore else @preserve\n        if (tr === mousehoverEvent) {\n          action(element, mousedownEvent, this.handleShow);\n          action(element, mouseenterEvent, this.handleShow);\n\n          // istanbul ignore else @preserve\n          if (!dismissible) {\n            action(element, mouseleaveEvent, this.handleHide);\n            action(\n              getDocument(element),\n              touchstartEvent,\n              this.handleTouch,\n              passiveHandler,\n            );\n          }\n        } else if (tr === mouseclickEvent) {\n          action(element, tr, !dismissible ? this.toggle : this.handleShow);\n        } else if (tr === focusEvent) {\n          action(element, focusinEvent, this.handleShow);\n          // istanbul ignore else @preserve\n          if (!dismissible) action(element, focusoutEvent, this.handleHide);\n          // istanbul ignore else @preserve\n          if (isApple()) {\n            action(element, mouseclickEvent, this.handleFocus);\n          }\n        }\n        // istanbul ignore else @preserve\n        if (dismissible && btn) {\n          action(btn, mouseclickEvent, this.handleHide);\n        }\n      });\n    }\n  };\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const { tooltip, options } = this;\n    const clone = { ...this, name: this.name };\n    const callback = () =>\n      setTimeout(\n        () => disposeTooltipComplete(clone, () => super.dispose()),\n        17,\n      );\n\n    if (options.animation && hasTip(clone)) {\n      this.options.delay = 0; // reset delay\n      this.hide();\n      emulateTransitionEnd(tooltip, callback);\n    } else {\n      callback();\n    }\n  }\n}\n"],"names":["popoverString","popoverComponent","tooltipString","getTipTemplate","tipType","isTooltip","bodyClass","header","arrow","body","tipClassPositions","styleTip","self","tipClasses","element","tooltip","container","offsetParent","options","RTL","isRTL","scrollLeft","scrollTop","getNodeScroll","setElementStyle","tipWidth","tipHeight","htmlcw","htmlch","htmlow","getDocumentElement","placement","parentCWidth","parentOWidth","fixedParent","getElementStyle","scrollbarWidth","leftBoundry","rightBoundry","observerEntry","elemWidth","elemHeight","elemRectLeft","elemRectRight","elemRectTop","getBoundingClientRect","elemOffsetLeft","elemOffsetTop","getRectRelativeToOffsetParent","topPosition","bottomPosition","leftPosition","rightPosition","arrowTop","arrowLeft","arrowRight","arrowWidth","arrowHeight","arrowAdjust","topExceed","bottomExceed","leftExceed","rightExceed","horizontals","verticals","isHTMLElement","updatedTooltipEvent","createCustomEvent","toLowerCase","dispatchEvent","tooltipDefaults","dataOriginalTitle","tooltipComponent","setHtml","content","sanitizeFn","isString","dirty","isFunction","tempDocument","isNodeList","isArray","isNode","createTip","id","title","template","animation","customClass","dismissible","btnClose","tipString","tipPositions","titleParts","contentParts","placementClass","tooltipTemplate","htmlMarkup","createElement","setAttribute","tooltipHeader","querySelector","tooltipBody","tempTitle","tempContent","tempBtn","addClass","hasClass","fadeClass","getElementContainer","majorBlockTags","containers","parentNode","getParentNode","isShadowRoot","isTableElement","c","i","r","getDocument","tooltipSelector","dataBsToggle","titleAttr","getTooltipInstance","getInstance","tooltipInitCallback","Tooltip","removeTooltip","removeAttribute","ariaDescribedBy","removePopup","hasTip","hasPopup","disposeTooltipComplete","callback","hasAttribute","toggleTooltipTitle","toggleTooltipAction","add","action","addListener","removeListener","touchstartEvent","passiveHandler","tooltipShownAction","shownTooltipEvent","Timer","tooltipHiddenAction","hiddenTooltipEvent","toggleTooltipOpenHandlers","parentModal","closest","modalString","parentOffcanvas","offcanvasString","target","titleAtt","getAttribute","BaseComponent","config","tipComponent","elem","getUID","ObjectAssign","position","getWindow","PositionObserver","focus","outTimer","showTooltipEvent","appendPopup","showClass","emulateTransitionEnd","delay","hideTooltipEvent","removeClass","enabled","btn","trigger","tr","mousehoverEvent","mousedownEvent","mouseenterEvent","mouseleaveEvent","mouseclickEvent","focusEvent","focusinEvent","focusoutEvent","isApple","clone"],"mappings":"8PACMA,EAAgB,UCAhBC,GAAmB,UCAnBC,EAAgB,UCEhBC,GAAkBC,GAAoB,CAC1C,MAAMC,EAAYD,IAAYF,EACxBI,EAAYD,EAAY,GAAGD,CAAO,SAAW,GAAGA,CAAO,QACvDG,EAAUF,EAAoD,GAAxC,cAAcD,CAAO,iBAC3CI,EAAQ,eAAeJ,CAAO,iBAC9BK,EAAO,eAAeH,CAAS,WACrC,MAAO,eAAeF,CAAO,WAAWF,CAAa,KACnDK,EAASC,EAAQC,CACnB,QACF,ECZMC,GAAoB,CACxB,IAAK,MACL,OAAQ,SACR,KAAM,QACN,MAAO,KACT,ECeMC,GAAYC,GAAkB,CAClC,sBAAsB,IAAM,CAC1B,MAAMC,EAAa,4BACb,CAAE,QAAAC,EAAS,QAAAC,EAAS,UAAAC,EAAW,aAAAC,EAAc,QAAAC,EAAS,MAAAV,GAAUI,EAGtE,GAAI,CAACG,EAAS,OACd,MAAMI,EAAMC,EAAAA,GAAMN,CAAO,EACnB,CAAE,EAAGO,EAAY,EAAGC,CAAA,EAAcC,EAAAA,GAAcN,CAAY,EAGlEO,EAAAA,GAAgBT,EAAS,CACvB,IAAK,GACL,KAAM,GACN,MAAO,GACP,OAAQ,EAAA,CACT,EACD,KAAM,CAAE,YAAaU,EAAU,aAAcC,GAAcX,EACrD,CAAE,YAAaY,EAAQ,aAAcC,EAAQ,YAAaC,CAAA,EAC9DC,EAAAA,EAAmBhB,CAAO,EAC5B,GAAI,CAAE,UAAAiB,GAAcb,EACpB,KAAM,CAAE,YAAac,EAAc,YAAaC,GAAiBjB,EAK3DkB,EAJiBC,EAAAA,EACrBnB,EACA,UAAA,IAEqC,QACjCoB,EACF,KAAK,IADcF,EACVF,EAAeC,EACfN,EAASE,CADkB,EAElCQ,EAAclB,GAAOe,EACtBE,EACD,EACEE,EAAeX,GAAWR,EAAuB,EAAjBiB,GAAsB,EAGtDG,EAAgB3B,EAAK,UAAU,SAASE,CAAO,EAC/C,CACJ,MAAO0B,EACP,OAAQC,EACR,KAAMC,EACN,MAAOC,GACP,IAAKC,CAAA,EACHL,GAAe,oBACjBM,IAAsB/B,EAAS,EAAI,EAE/B,CACJ,EAAGgC,EACH,EAAGC,CAAA,EACDC,EAAAA,GACFlC,EACAG,EACA,CAAE,EAAGI,EAAY,EAAGC,CAAA,CAAU,EAIhCE,EAAAA,GAAgBhB,EAAsB,CACpC,IAAK,GACL,KAAM,GACN,MAAO,GACP,OAAQ,EAAA,CACT,EACD,IAAIyC,EAA+B,EAC/BC,EAAkC,GAClCC,EAAgC,EAChCC,EAAiC,GACjCC,EAA4B,GAC5BC,EAA6B,GAC7BC,EAA8B,GAElC,MAAMC,EAAahD,EAAM,aAAe,EAClCiD,EAAcjD,EAAM,cAAgB,EACpCkD,EAAcF,EAAa,EAGjC,IAAIG,EAAYf,EAAclB,EAAY+B,EAAc,EACpDG,EACFhB,EAAclB,EAAYe,EAAagB,GAAe7B,EACpDiC,EAAanB,EAAejB,EAAW+B,EAAanB,EACpDyB,EACFpB,EAAejB,EAAWe,EAAYgB,GAAclB,EAEtD,MAAMyB,EAAc,CAAC,OAAQ,OAAO,EAC9BC,EAAY,CAAC,MAAO,QAAQ,EAElCL,EAAYI,EAAY,SAAShC,CAAS,EACtCa,EAAcH,EAAa,EAAIf,EAAY,EAAI+B,EAAc,EAC7DE,EACJC,EAAeG,EAAY,SAAShC,CAAS,EACzCa,EAAclB,EAAY,EAAIe,EAAa,EAAIgB,GAAe7B,EAC9DgC,EACJC,EAAaG,EAAU,SAASjC,CAAS,EACrCW,EAAeF,EAAY,EAAIf,EAAW,EAAIY,EAC9CwB,EACJC,EAAcE,EAAU,SAASjC,CAAS,EACtCW,EAAejB,EAAW,EAAIe,EAAY,GAAKF,EAC/CwB,EAIJ/B,EAAYgC,EAAY,SAAShC,CAAS,GAAK8B,GAAcC,EACzD,MACA/B,EAEJA,EAAYA,IAAc,OAAS4B,EAAY,SAAW5B,EAC1DA,EAAYA,IAAc,UAAY6B,EAAe,MAAQ7B,EAC7DA,EAAYA,IAAc,QAAU8B,EAAa,QAAU9B,EAC3DA,EAAYA,IAAc,SAAW+B,EACjC,OAEA/B,EAIChB,EAAQ,UAAU,SAASgB,CAAS,IACvChB,EAAQ,UAAYA,EAAQ,UAAU,QACpCF,EACAH,GAAkBqB,CAAS,CAAA,GAM3BgC,EAAY,SAAShC,CAAS,GAE5BA,IAAc,OAEhBoB,EAAeL,EAAiBrB,EAAW+B,EAG3CL,EAAeL,EAAiBN,EAAYgB,EAI1CG,GAAaC,GACfX,EAAc,EACdC,EAAiB,EACjBG,EAAWN,EAAgBN,EAAa,EAAIgB,EAAc,GACjDE,GACTV,EAAcF,EACdG,EAAiB,GACjBG,EAAWZ,EAAa,EAAIe,GACnBI,GACTX,EAAcF,EAAgBrB,EAAYe,EAC1CS,EAAiB,GACjBG,EAAW3B,EAAYe,EAAa,EAAIe,IAExCP,EAAcF,EAAgBrB,EAAY,EAAIe,EAAa,EAC3DY,EAAW3B,EAAY,EAAI+B,EAAc,IAElCO,EAAU,SAASjC,CAAS,IACjCA,IAAc,MAChBkB,EAAcF,EAAgBrB,EAAY+B,EAG1CR,EAAcF,EAAgBN,EAAagB,EAIzCI,GACFV,EAAe,EACfG,EAAYR,EAAiBN,EAAY,EAAIkB,GACpCI,GACTX,EAAe,OACfC,EAAgB,EAChBG,EAAaf,EAAY,EAAIF,EAAeK,GAAgBe,IAE5DP,EAAeL,EAAiBrB,EAAW,EAAIe,EAAY,EAC3Dc,EAAY7B,EAAW,EAAIiC,IAK/BlC,EAAAA,GAAgBT,EAAS,CACvB,IAAK,GAAGkC,CAAW,KACnB,OAAQC,IAAmB,GAAK,GAAK,GAAGA,CAAc,KACtD,KAAMC,IAAiB,OAASA,EAAe,GAAGA,CAAY,KAC9D,MAAOC,IAAkB,GAAK,GAAGA,CAAa,KAAO,EAAA,CACtD,EAIGa,EAAAA,EAAczD,CAAK,IACjB6C,IAAa,KACf7C,EAAM,MAAM,IAAM,GAAG6C,CAAQ,MAE3BC,IAAc,GAChB9C,EAAM,MAAM,KAAO,GAAG8C,CAAS,KACtBC,IAAe,KACxB/C,EAAM,MAAM,MAAQ,GAAG+C,CAAU,OAGrC,MAAMW,GAAsBC,EAAAA,GAI1B,cAAcC,EAAAA,GAAYxD,EAAK,IAAI,CAAC,EAAA,EAEtCyD,EAAAA,EAAcvD,EAASoD,EAAmB,CAC5C,CAAC,CACH,ECxNMI,GAAkC,CACtC,SAAUnE,GAAeD,CAAa,EACtC,MAAO,GACP,YAAa,GACb,QAAS,cACT,UAAW,MACX,WAAY,OACZ,UAAW,GACX,MAAO,IACP,UAAW,SAAS,KACpB,QAAS,GACT,YAAa,GACb,SAAU,EACZ,EChBMqE,GAAoB,sBCApBC,EAAmB,UCSnBC,EAAU,CACd3D,EACA4D,EACAC,IACG,CAEH,GAAIC,IAASF,CAAO,GAAKA,EAAQ,OAAQ,CACvC,IAAIG,EAAQH,EAAQ,KAAA,EAChBI,EAAAA,GAAWH,CAAU,IAAGE,EAAQF,EAAWE,CAAK,GAGpD,MAAME,EADY,IAAI,UAAA,EACS,gBAAgBF,EAAO,WAAW,EACjE/D,EAAQ,OAAW,GAAGiE,EAAa,KAAK,UAAW,CACrD,MAAWd,IAAcS,CAAO,EAC9B5D,EAAQ,OAAO4D,CAAO,GAEtBM,KAAWN,CAAO,GAAMO,EAAAA,GAAQP,CAAO,GAAKA,EAAQ,MAAMQ,EAAAA,CAAM,IAEhEpE,EAAQ,OAAW,GAAG4D,CAAQ,CAElC,ECVMS,GAAavE,GAA4B,CAC7C,MAAMP,EAAYO,EAAK,OAAS4D,EAE1B,CAAE,GAAAY,EAAI,QAAAtE,EAAS,QAAAI,CAAA,EAAYN,EAC3B,CACJ,MAAAyE,EACA,UAAAtD,EACA,SAAAuD,EACA,UAAAC,EACA,YAAAC,EACA,WAAAb,EACA,YAAAc,EACA,QAAAf,EACA,SAAAgB,CAAA,EACExE,EACEyE,EAAYtF,EAAYH,EAAgBF,EACxC4F,EAAe,CAAE,GAAGlF,EAAA,EAC1B,IAAImF,EAAqB,CAAA,EACrBC,EAAuB,CAAA,EAEvB1E,EAAAA,GAAMN,CAAO,IACf8E,EAAa,KAAO,MACpBA,EAAa,MAAQ,SAIvB,MAAMG,EAAiB,MAAMJ,CAAS,IAAIC,EAAa7D,CAAS,CAAC,GAGjE,IAAIiE,EACJ,GAAI/B,EAAAA,EAAcqB,CAAQ,EACxBU,EAAkBV,MACb,CACL,MAAMW,EAAaC,EAAAA,GAAc,KAAK,EACtCzB,EAAQwB,EAAYX,EAAUX,CAAU,EACxCqB,EAAkBC,EAAW,UAC/B,CAGA,GAAI,CAAChC,EAAAA,EAAc+B,CAAe,EAAG,OAGrCpF,EAAK,QAAUoF,EAAgB,UAAU,EAAI,EAC7C,KAAM,CAAE,QAAAjF,GAAYH,EAGpBuF,KAAapF,EAAS,KAAMqE,CAAE,EAC9Be,KAAapF,EAAS,OAAQb,CAAa,EAE3C,MAAMI,EAAYD,EACd,GAAGH,CAAa,SAChB,GAAGF,CAAa,QACdoG,EAAgB/F,EAClB,KACAgG,EAAAA,GAA2B,IAAIrG,CAAa,UAAWe,CAAO,EAC5DuF,EAAcD,EAAAA,GAA2B,IAAI/F,CAAS,GAAIS,CAAO,EAGvEH,EAAK,MAAQyF,EAAAA,GACX,IAAIV,CAAS,SACb5E,CAAA,EAEF,KAAM,CAAE,MAAAP,GAAUI,EAElB,GAAIqD,EAAAA,EAAcoB,CAAK,EAAGQ,EAAa,CAACR,EAAM,UAAU,EAAI,CAAC,MACxD,CACH,MAAMkB,EAAYL,EAAAA,GAAc,KAAK,EACrCzB,EAAQ8B,EAAWlB,EAAOV,CAAU,EACpCkB,EAAa,CAAK,GAAGU,EAAU,UAAW,CAC5C,CAEA,GAAItC,EAAAA,EAAcS,CAAO,EAAGoB,EAAe,CAACpB,EAAQ,UAAU,EAAI,CAAC,MAC9D,CACH,MAAM8B,EAAcN,EAAAA,GAAc,KAAK,EACvCzB,EAAQ+B,EAAa9B,EAASC,CAAU,EACxCmB,EAAe,CAAK,GAAGU,EAAY,UAAW,CAChD,CAGA,GAAIf,EACF,GAAIJ,EACF,GAAIpB,EAAAA,EAAcyB,CAAQ,EACxBG,EAAa,CAAC,GAAGA,EAAYH,EAAS,UAAU,EAAI,CAAC,MAChD,CACL,MAAMe,EAAUP,EAAAA,GAAc,KAAK,EACnCzB,EAAQgC,EAASf,EAAUf,CAAU,EACrCkB,EAAa,CAAC,GAAGA,EAAYY,EAAQ,UAAkB,CACzD,SAGIL,KAA6B,OAAA,EAC7BnC,EAAAA,EAAcyB,CAAQ,EACxBI,EAAe,CAAC,GAAGA,EAAcJ,EAAS,UAAU,EAAI,CAAC,MACpD,CACL,MAAMe,EAAUP,EAAAA,GAAc,KAAK,EACnCzB,EAAQgC,EAASf,EAAUf,CAAU,EACrCmB,EAAe,CAAC,GAAGA,EAAcW,EAAQ,UAAkB,CAC7D,CAOCpG,EAYMgF,GAASiB,GAAa7B,EAAQ6B,EAAajB,EAAOV,CAAU,GAVjEU,GAASe,GACX3B,EAAQ2B,EAAeP,EAAYlB,CAAU,EAG3CD,GAAW4B,GACb7B,EAAQ6B,EAAaR,EAAcnB,CAAU,EAG/C/D,EAAK,IAAMyF,EAAAA,GAAiC,aAActF,CAAO,GAC/D,QAIJ2F,EAAAA,GAAS3F,EAAS,mBAAmB,EACrC2F,EAAAA,GAASlG,EAAO,mBAAmB,EAI9BmG,EAAAA,GAAS5F,EAAS4E,CAAS,GAAGe,EAAAA,GAAS3F,EAAS4E,CAAS,EAE1DJ,GAAa,CAACoB,EAAAA,GAAS5F,EAAS6F,GAAAA,SAAS,GAC3CF,EAAAA,GAAS3F,EAAS6F,YAAS,EAGzBpB,GAAe,CAACmB,EAAAA,GAAS5F,EAASyE,CAAW,GAC/CkB,EAAAA,GAAS3F,EAASyE,CAAW,EAG1BmB,EAAAA,GAAS5F,EAASgF,CAAc,GAAGW,EAAAA,GAAS3F,EAASgF,CAAc,CAC1E,EClJMc,GAAuB/F,GAAqB,CAChD,MAAMgG,EAAiB,CAAC,OAAQ,MAAM,EAChCC,EAA4B,CAAA,EAClC,GAAI,CAAE,WAAAC,GAAelG,EAErB,KAAOkG,GAAc,CAACF,EAAe,SAASE,EAAW,QAAQ,GAC/DA,EAAaC,EAAAA,EAAcD,CAAU,EAE/BE,EAAAA,GAAaF,CAAU,GAAKG,EAAAA,GAAeH,CAAU,GACzDD,EAAW,KAAKC,CAAyB,EAI7C,OACED,EAAW,KAAK,CAACK,EAAGC,KAEdlF,EAAAA,EAAgBiF,EAAG,UAAU,IAAM,YACnCjF,EAAAA,EAAgBiF,EAAG,UAAU,IAAM,YACjCA,EAAE,eAAiBA,EAAE,eACvBL,EAAW,MAAMM,EAAI,CAAC,EAAE,MAAOC,GAC7BnF,EAAAA,EAAgBmF,EAAG,UAAU,IAAM,QAAA,EAGhCF,EAEF,IACR,GAEDG,EAAAA,EAAYzG,CAAO,EAAE,IAEzB,ECsBM0G,GACJ,IAAIC,eAAY,KAAKvH,CAAa,iBAAiBA,CAAa,KAC5DwH,GAAY,QAGlB,IAAIC,GAAsB7G,GACxB8G,KAAqB9G,EAAS0D,CAAgB,EAGhD,MAAMqD,GAAuB/G,GAAqB,IAAIgH,GAAQhH,CAAO,EAK/DiH,GAAiBnH,GAAkB,CACvC,KAAM,CAAE,QAAAE,EAAS,QAAAC,EAAS,UAAAC,CAAA,EAAcJ,EACxCoH,EAAAA,GAAgBlH,EAASmH,IAAe,EACxCC,EAAAA,YACEnH,EACAC,CAAA,CAEJ,EAGMmH,EAAUvH,GAAuC,CACrD,KAAM,CAAE,QAAAG,EAAS,UAAAC,CAAA,EAAcJ,EAE/B,OAAOG,GACLqH,EAAAA,SAASrH,EAASC,CAAS,CAC/B,EAGMqH,GAAyB,CAACzH,EAAe0H,IAA0B,CACvE,KAAM,CAAE,QAAAxH,GAAYF,EACpBA,EAAK,sBAAA,EAIH2H,EAAAA,GAAazH,EAASyD,EAAiB,GAAK3D,EAAK,OAAS4D,GAE1DgE,GAAmB5H,CAAI,EAGrB0H,GAAUA,EAAA,CAChB,EAGMG,GAAsB,CAAC7H,EAAe8H,IAAkB,CAC5D,MAAMC,EAASD,EAAME,EAAAA,EAAcC,EAAAA,EAC7B,CAAE,QAAA/H,GAAYF,EAEpB+H,EACEpB,EAAAA,EAAYzG,CAAO,EACnBgI,EAAAA,GACAlI,EAAK,YACLmI,EAAAA,EAAA,CAEJ,EAGMC,GAAsBpI,GAAkB,CAC5C,KAAM,CAAE,QAAAE,GAAYF,EACdqI,EAAoB9E,EAAAA,GAIxB,YAAYC,EAAAA,GAAYxD,EAAK,IAAI,CAAC,EAAA,EAGpC6H,GAAoB7H,EAAM,EAAI,EAC9ByD,EAAAA,EAAcvD,EAASmI,CAAiB,EACxCC,KAAM,MAAMpI,EAAS,IAAI,CAC3B,EAGMqI,GAAuBvI,GAAkB,CAC7C,KAAM,CAAE,QAAAE,GAAYF,EACdwI,EAAqBjF,EAAAA,GAIzB,aAAaC,EAAAA,GAAYxD,EAAK,IAAI,CAAC,EAAA,EAGrC6H,GAAoB7H,CAAI,EACxBmH,GAAcnH,CAAI,EAClByD,EAAAA,EAAcvD,EAASsI,CAAkB,EAEzCF,KAAM,MAAMpI,EAAS,KAAK,CAC5B,EAGMuI,GAA4B,CAACzI,EAAe8H,IAAkB,CAClE,MAAMC,EAASD,EAAME,EAAAA,EAAcC,EAAAA,EAC7B,CAAE,QAAA/H,EAAS,QAAAC,CAAA,EAAYH,EACvB0I,EAAcC,EAAAA,GAAQzI,EAAS,IAAI0I,EAAAA,WAAW,EAAE,EAChDC,EAAkBF,EAAAA,GAAQzI,EAAS,IAAI4I,EAAAA,eAAe,EAAE,EAE1DhB,EACF,CAAC5H,EAASC,CAAO,EACd,QAAS4I,GAAW/I,EAAK,UAAU,QAAQ+I,CAAM,CAAC,EAChD/I,EAAK,UAAU,WAAA,EAGlB0I,GACFX,EAAOW,EAAa,WAAWE,EAAAA,WAAW,GAAI5I,EAAK,UAAU,EAE3D6I,GACFd,EAAOc,EAAiB,WAAWC,EAAAA,eAAe,GAAI9I,EAAK,UAAU,CAEzE,EAGM4H,GAAqB,CAAC5H,EAAe8D,IAAqB,CAE9D,MAAMkF,EAAW,CAACrF,GAAmBmD,EAAS,EACxC,CAAE,QAAA5G,GAAYF,EAEpBuF,EAAAA,GACErF,EACA8I,EAASlF,EAAU,EAAI,CAAC,EACxBA,GACEmF,EAAAA,EAAa/I,EAAS8I,EAAS,CAAC,CAAC,GAEjC,EAAA,EAEJ5B,EAAAA,GAAgBlH,EAAS8I,EAASlF,EAAU,EAAI,CAAC,CAAC,CACpD,EAKA,MAAqBoD,WAAgBgC,EAAAA,aAAc,CACjD,OAAO,SAAWtC,GAClB,OAAO,KAAOK,GACd,OAAO,YAAcF,GACrB,OAAO,SAAWhH,GAalB,YAAYgJ,EAA0BI,EAAkC,CACtE,MAAMJ,EAAQI,CAAM,EAEpB,KAAM,CAAE,QAAAjJ,GAAY,KACdT,EAAY,KAAK,OAASmE,EAC1BmB,EAAYtF,EAAYH,EAAgBF,EACxCgK,EAAe3J,EAAYmE,EAAmBvE,GAGpD0H,GAAyCsC,GACvCrC,KAAeqC,EAAMD,CAAY,EAGnC,KAAK,QAAU,GAEf,KAAK,GAAK,GAAGrE,CAAS,IAAIuE,KAAOpJ,EAAS6E,CAAS,CAAC,GAGpD,KAAM,CAAE,QAAAzE,GAAY,KAIpB,GAAM,CAACA,EAAQ,OAASb,GAAe,CAACA,GAAa,CAACa,EAAQ,QAC5D,OAIFiJ,EAAAA,EAAa7F,GAAiB,CAAE,UAAW,EAAA,CAAI,EAK7CiE,EAAAA,GAAazH,EAAS4G,EAAS,GAAKrH,GACpC,OAAOa,EAAQ,OAAU,UAEzBsH,GAAmB,KAAMtH,EAAQ,KAAK,EAIxC,MAAMF,EAAY6F,GAAoB/F,CAAO,EACvCG,EAAe,CAAC,SAAU,QAAS,UAAU,EAAE,KAChDmJ,GACCjI,EAAAA,EAAgBnB,EAAW,UAAU,IACnCoJ,CAAA,EAEJpJ,EACAqJ,EAAAA,GAAUvJ,CAAO,EAErB,KAAK,UAAYE,EACjB,KAAK,aAAeC,EAGpBkE,GAAU,IAAI,EAGT,KAAK,UAGV,KAAK,UAAY,IAAImF,GAAAA,iBAAiB,IAAM,KAAK,QAAQ,EAGzD,KAAK,sBAAsB,EAAI,EACjC,CAGA,IAAI,MAAO,CACT,OAAO9F,CACT,CAEA,IAAI,UAAW,CACb,OAAOF,EACT,CAMA,YAAc,IAAMiG,EAAAA,GAAM,KAAK,OAAsB,EAErD,WAAa,IAAM,KAAK,KAAA,EACxB,MAAO,CACL,KAAM,CAAE,QAAArJ,EAAS,QAAAH,EAAS,QAAAD,EAAS,UAAAE,EAAW,GAAAoE,GAAO,KAC/C,CAAE,UAAAG,GAAcrE,EAChBsJ,EAAWtB,EAAAA,GAAM,IAAIpI,EAAS,KAAK,EAEzCoI,KAAM,MAAMpI,EAAS,KAAK,EAEtBC,GAAW,CAACyJ,GAAY,CAACrC,EAAO,IAAI,GACtCe,EAAAA,GAAM,IACJpI,EACA,IAAM,CACJ,MAAM2J,EAAmBtG,EAAAA,GAIvB,WAAWC,EAAAA,GAAY,KAAK,IAAI,CAAC,EAAA,EAEnCC,EAAAA,EAAcvD,EAAS2J,CAAgB,EAGlCA,EAAiB,mBAEpBC,EAAAA,YAAY3J,EAASC,CAAS,EAE9BmF,EAAAA,GAAarF,EAASmH,EAAAA,GAAiB,IAAI7C,CAAE,EAAE,EAE/C,KAAK,OAAA,EACLiE,GAA0B,KAAM,EAAI,EAG/B1C,EAAAA,GAAS5F,EAAS4J,GAAAA,SAAS,GAAGjE,EAAAA,GAAS3F,EAAS4J,YAAS,EAE1DpF,EACFqF,EAAAA,GAAqB7J,EAAS,IAAMiI,GAAmB,IAAI,CAAC,KACpC,IAAI,EAElC,EACA,GACA,IAAA,CAGN,CAGA,WAAa,IAAM,KAAK,KAAA,EACxB,MAAO,CACL,KAAM,CAAE,QAAA9H,EAAS,QAAAH,EAAS,QAAAD,CAAA,EAAY,KAChC,CAAE,UAAAyE,EAAW,MAAAsF,CAAA,EAAU3J,EAE7BgI,KAAM,MAAMpI,EAAS,IAAI,EAGrBC,GAAWoH,EAAO,IAAI,GACxBe,EAAAA,GAAM,IACJpI,EACA,IAAM,CACJ,MAAMgK,EAAmB3G,EAAAA,GAIvB,WAAWC,EAAAA,GAAY,KAAK,IAAI,CAAC,EAAA,EAEnCC,EAAAA,EAAcvD,EAASgK,CAAgB,EAGlCA,EAAiB,mBACpB,KAAK,OAAA,EACLC,EAAAA,GAAYhK,EAAS4J,YAAS,EAC9BtB,GAA0B,IAAI,EAG1B9D,EACFqF,EAAAA,GAAqB7J,EAAS,IAAMoI,GAAoB,IAAI,CAAC,KACpC,IAAI,EAEnC,EACA0B,EAAQ,GACR,KAAA,CAGN,CAGA,OAAS,IAAM,CACblK,GAAS,IAAI,CACf,EAGA,OAAS,IAAM,CACb,KAAM,CAAE,QAAAI,GAAY,KAEhBA,GAAW,CAACoH,EAAO,IAAI,OAAQ,KAAA,OACzB,KAAA,CACZ,EAGA,QAAS,CACP,KAAM,CAAE,QAAA6C,GAAY,KAEfA,IACH,KAAK,sBAAsB,EAAI,EAC/B,KAAK,QAAU,CAACA,EAEpB,CAGA,SAAU,CACR,KAAM,CAAE,QAAAjK,EAAS,QAAAiK,CAAA,EAAY,KAEzBA,IACEjK,GAAWoH,EAAO,IAAI,QAAQ,KAAA,EAClC,KAAK,sBAAA,EACL,KAAK,QAAU,CAAC6C,EAEpB,CAGA,eAAgB,CACT,KAAK,aACA,QAAA,EADS,KAAK,OAAA,CAE1B,CAGA,YAAc,CAAC,CAAE,OAAArB,KAAyB,CACxC,KAAM,CAAE,QAAA5I,EAAS,QAAAD,CAAA,EAAY,KAI1BC,GAAWA,EAAQ,SAAS4I,CAAM,GACnCA,IAAW7I,GACV6I,GAAU7I,EAAQ,SAAS6I,CAAM,GAIlC,KAAK,KAAA,CAET,EAGA,sBAAyBjB,GAAkB,CACzC,MAAMC,EAASD,EAAME,EAAAA,EAAcC,EAAAA,EAE7B,CAAE,QAAA/H,EAAS,QAAAI,EAAS,IAAA+J,CAAA,EAAQ,KAC5B,CAAE,QAAAC,GAAYhK,EAEduE,EAAc,GADF,KAAK,OAASjB,GACEtD,EAA2B,aAKxDgK,EAAQ,SAAS,QAAQ,IAC5B,KAAK,QAAU,CAAC,CAACxC,EAEMwC,EAAQ,MAAM,GAAG,EAEzB,QAASC,GAAO,CAEzBA,IAAOC,EAAAA,IACTzC,EAAO7H,EAASuK,KAAgB,KAAK,UAAU,EAC/C1C,EAAO7H,EAASwK,KAAiB,KAAK,UAAU,EAG3C7F,IACHkD,EAAO7H,EAASyK,KAAiB,KAAK,UAAU,EAChD5C,EACEpB,EAAAA,EAAYzG,CAAO,EACnBgI,EAAAA,GACA,KAAK,YACLC,EAAAA,EAAA,IAGKoC,IAAOK,KAChB7C,EAAO7H,EAASqK,EAAK1F,EAA4B,KAAK,WAAnB,KAAK,MAAwB,EACvD0F,IAAOM,OAChB9C,EAAO7H,EAAS4K,KAAc,KAAK,UAAU,EAExCjG,GAAakD,EAAO7H,EAAS6K,EAAAA,GAAe,KAAK,UAAU,EAE5DC,EAAAA,MACFjD,EAAO7H,EAAS0K,KAAiB,KAAK,WAAW,GAIjD/F,GAAewF,GACjBtC,EAAOsC,EAAKO,KAAiB,KAAK,UAAU,CAEhD,CAAC,EAEL,EAGA,SAAU,CACR,KAAM,CAAE,QAAAzK,EAAS,QAAAG,CAAA,EAAY,KACvB2K,EAAQ,CAAE,GAAG,KAAM,KAAM,KAAK,IAAA,EAC9BvD,EAAW,IACf,WACE,IAAMD,GAAuBwD,EAAO,IAAM,MAAM,SAAS,EACzD,EAAA,EAGA3K,EAAQ,WAAaiH,EAAO0D,CAAK,GACnC,KAAK,QAAQ,MAAQ,EACrB,KAAK,KAAA,EACLjB,EAAAA,GAAqB7J,EAASuH,CAAQ,GAEtCA,EAAA,CAEJ,CACF"}